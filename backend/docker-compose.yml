services:
  #Backend services
  auth-api: #authentication service
    container_name: auth-api
    build:
      dockerfile: authservice/Dockerfile
      context: .
    restart: always
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_KEY=${JWT_KEY}

  nginx: #load balancer using nginx
    container_name: nginx
    build:
      dockerfile: Dockerfile
      context: nginx
    restart: always
    ports:
      - "80:80"
    depends_on:
      - auth-api
      - courses-api
      - enrollments-api

  database: #database for everything
    container_name: database
    image: mongo:7.0
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=database

  courses-api: #courses service
    container_name: courses-api
    build:
      dockerfile: courses-service/Dockerfile
      context: .
    restart: always
    environment:
      - DATABASE_URL=${DATABASE_URL}

  enrollments-api: #enrollments service
    container_name: enrollments-api
    build:
      dockerfile: enrollments-service/Dockerfile
      context: .
    restart: always
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_KEY=${JWT_KEY}
    depends_on:
      - kafka

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  invoices-api: #invoices service
    container_name: invoices-api
    build:
      dockerfile: invoices-service/Dockerfile
      context: .
    restart: always
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_CONNECT=${RABBITMQ_CONNECT}
    depends_on:
      - kafka
      - rabbitmq

  email-api:
    container_name: email-api
    build:
      dockerfile: email-service/Dockerfile
      context: .
    restart: always
    environment:
      - RABBITMQ_CONNECT=${RABBITMQ_CONNECT}
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # RabbitMQ messaging port
      - "15672:15672"  # RabbitMQ management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin  # Set a custom username
      RABBITMQ_DEFAULT_PASS: admin123  # Set a custom password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Persistent storage for RabbitMQ data

  # Frontend Services
#  container:
#    container_name: container-frontend
#    build:
#      context: ../frontend/container
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    depends_on:
#      - login-app
#      - courses-app
#
#  login-app:
#    container_name: login-app
#    build:
#      context: ../frontend/login-app
#      dockerfile: Dockerfile
#    ports:
#      - "8081:8081"
#
#  courses-app:
#    container_name: courses-app
#    build:
#      context: ../frontend/courses-app
#      dockerfile: Dockerfile
#    ports:
#      - "8082:8082"
#  stats-service: # for Faas
#    build: ./stats-service
#    ports:
#      - "5006:5006"
#    env_file:
#      - ./stats-service/.env
  frontend:
    container_name: frontend-service
    build:
      context: ../frontend/frontend
      dockerfile: Dockerfile

volumes:
  rabbitmq_data:

